#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-18 && immutable' }
  environment {
    REPO = "synthetics"
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    PIPELINE_LOG_LEVEL = 'INFO'
    DOCKERELASTIC_SECRET = 'secret/observability-team/ci/docker-registry/prod'
    DOCKER_REGISTRY = 'docker.elastic.co'
    NODE_DOCKER_IMAGE = "${env.DOCKER_REGISTRY}/observability-ci/node-cypress:latest"
    SECCOMP_FILE = "${env.WORKSPACE}/${env.BASE_DIR}/.ci/seccomp_profile.json"
    NPMRC_SECRET = 'secret/jenkins-ci/npmjs/elasticmachine'
    TOTP_SECRET = 'totp/code/npmjs-elasticmachine'
    SLACK_CHANNEL = '#synthetics-user_experience-uptime'
  }
  options {
    timeout(time: 12, unit: 'HOURS')  // to support releases then we will add a timeout in each stage
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger("${obltGitHubComments()}")
    upstream("apm-agent-rum/heartbeat-elastic-synthetics/${ env.JOB_BASE_NAME.startsWith('PR-') ? 'none' : 'heartbeat-synthetics' }, apm-agent-rum/heartbeat-elastic-synthetics/${ env.JOB_BASE_NAME.startsWith('PR-') ? 'none' : 'heartbeat-synthetics' }-7.x")
  }
  parameters {
    booleanParam(name: 'run_all_stages', defaultValue: false, description: 'Force to run all stages.')
    booleanParam(name: 'release', defaultValue: false, description: 'Release. If so, all the other parameters will be ignored when releasing from main.')
  }
  stages {
    /**
     Checkout the code and stash it, to use it on other stages.
     */
    stage('Checkout') {
      options {
        skipDefaultCheckout()
        timeout(5)
      }
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}")
        retryWithSleep(retries: 3, seconds: 5, backoff: true) {
          dockerLogin(secret: "${DOCKERELASTIC_SECRET}",
                      registry: "${DOCKER_REGISTRY}")
          withNodeJSEnv(){
            dir("${BASE_DIR}"){
              sh(label: 'Download dependencies',script: 'npm install')
            }
          }
        }
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false, excludes: ".nvm/**,.npm/_cacache/**,.nvm/.git/**"
      }
    }
    /**
     Checks formatting / linting.
     */
    stage('Lint') {
      options {
        timeout(5)
      }
      steps {
        withGithubNotify(context: 'Linting') {
          cleanup()
          withNodeJSEnv(){
            dir("${BASE_DIR}"){
              sh(label: 'Checks linting',script: 'npm run-script lint')
              preCommit(commit: "${GIT_BASE_COMMIT}", junit: true)
            }
          }
        }
      }
    }
    /**
     Build the main package
     */
    stage('Build') {
      options {
        timeout(5)
      }
      steps {
        withGithubNotify(context: 'Build') {
          cleanup()
          withNodeJSEnv(){
            dir("${BASE_DIR}"){
              sh(label: 'Build',script: 'npm run build')
            }
          }
        }
      }
    }
    /**
     Execute integration tests.
     */
    stage('Test') {
      options {
        timeout(5)
      }
      steps {
        withGithubNotify(context: 'Test') {
          cleanup()
          withNodeJSEnv(){
            dir("${BASE_DIR}"){
              sh(label: 'install jest-unit',script: 'npm add --dev jest-junit')
              sh(label: 'install e2e bundling deps',script: 'npm install --prefix ./__tests__/e2e')
              sh(label: 'Runs the tests',script: './node_modules/.bin/jest --ci --reporters=default --reporters=jest-junit')
            }
          }
        }
      }
      post {
        always {
          junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/junit.xml")
        }
      }
    }
    stage('E2e Test') {
      agent { label 'ubuntu-18 && immutable' }
      environment {
        E2E_FOLDER = "__tests__/e2e"
      }
      options {
        skipDefaultCheckout()
        timeout(20)
      }
      steps {
        withGithubNotify(context: 'E2e Test') {
          cleanup()
          withNodeJSEnv(){
            dir("${BASE_DIR}"){
              sh(label: 'set permissions', script: '''
                chmod -R ugo+rw examples
              ''')
              dir("${E2E_FOLDER}"){
                sh(label: 'run e2e tests',script: 'npm run test')
              }
            }
          }
        }
      }
      post {
        always {
          archiveArtifacts(allowEmptyArchive: true, artifacts: "${BASE_DIR}/${E2E_FOLDER}/junit.xml")
          junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/${E2E_FOLDER}/junit.xml")
        }
      }
    }
    stage('Release') {
      options {
        skipDefaultCheckout()
      }
      when {
        beforeAgent true
        allOf {
          branch 'main'
          expression { return params.release }
        }
      }
      agent { label 'ubuntu-18 && immutable' }
      stages {
        stage('Approve to Release') {
          options { skipDefaultCheckout() }
          steps {
            notifyStatus(slackStatus: 'warning', subject: "[${env.REPO}] Release ready to be pushed",
                         body: "Please go to (<${env.BUILD_URL}input|here>) to approve or reject within 12 hours.")
            setEnvVar('RELEASE', prompt(message: 'Should we release a new version?'))
          }
        }
        stage('Release CI') {
          when {
            beforeAgent true
            expression { return env.RELEASE == 'true' }
          }
          options { skipDefaultCheckout() }
          environment {
            NPM_PACKAGE = '@elastic/synthetics'
          }
          steps {
            cleanup()
            withNodeJSEnv() {
              dir("${BASE_DIR}") {
                withNpmrc(secret: "${env.NPMRC_SECRET}", path: "${env.WORKSPACE}/${env.BASE_DIR}") {
                  withGitRelease(credentialsId: '2a9602aa-ab9f-4e52-baf3-b71ca88469c7-UserAndToken') {
                    sh(script: 'npm run clean', label: 'clean release')
                    sh(script: 'npm ci', label: 'prepare the ci environment')
                    setEnvVar('VERSION', sh(script: 'npm version prerelease --preid=beta', label: 'bump the beta version', returnStdout: true).trim())
                    gitPush()
                    gitPush(args: '--tags')
                    log(level: 'INFO', text: "Version to be published '${env.VERSION}'")
                    withTotpVault(secret: "${env.TOTP_SECRET}", code_var_name: 'TOTP_CODE'){
                      sh(script: "npm publish --otp=${env.TOTP_CODE} --tag beta", label: 'publish to NPM')
                    }
                    withTotpVault(secret: "${env.TOTP_SECRET}", code_var_name: 'TOTP_CODE'){
                      sh(script: "npm dist-tag --otp=${env.TOTP_CODE} add ${env.NPM_PACKAGE}@${env.VERSION} latest", label: 'retag latest')
                    }
                  }
                }
              }
            }
          }
          post {
            success {
              notifyStatus(slackStatus: 'good', subject: "[${env.REPO}] Release '${env.VERSION}' published", body: "Great news, the release has been done successfully. (<${env.RUN_DISPLAY_URL}|Open>). \n Release URL: (<https://preview.npmjs.com/package/${env.NPM_PACKAGE}/v/${env.VERSION}|${env.VERSION}>)")
            }
            always {
              script {
                currentBuild.description = "${currentBuild.description?.trim() ? currentBuild.description : ''} released"
              }
            }
            failure {
              notifyStatus(slackStatus: 'danger', subject: "[${env.REPO}] Release '${env.VERSION?.trim()}' failed", body: "(<${env.RUN_DISPLAY_URL}|Open>)")
            }
          }
        }
        stage('Approve to Stack Release') {
          when {
            beforeAgent true
            expression { return env.RELEASE == 'true' }
          }
          options { skipDefaultCheckout() }
          steps {
            notifyStatus(slackStatus: 'warning', subject: "[${env.REPO}] Stack Release ready to be pushed",
                         body: "Please go to (<${env.BUILD_URL}input|here>) to approve or reject within 12 hours.")
            setEnvVar('STACK_RELEASE', prompt(message: 'Should we tag the current version as a stack release?'))
          }
        }
        stage('Stack Release CI') {
          when {
            beforeAgent true
            expression { return env.RELEASE == 'true' && env.STACK_RELEASE == 'true' }
          }
          options { skipDefaultCheckout() }
          environment {
            NPM_PACKAGE = '@elastic/synthetics'
          }
          steps {
            cleanup()
            withNodeJSEnv() {
              dir("${BASE_DIR}") {
                withNpmrc(secret: "${env.NPMRC_SECRET}", path: "${env.WORKSPACE}/${env.BASE_DIR}") {
                  withTotpVault(secret: "${env.TOTP_SECRET}", code_var_name: 'TOTP_CODE') {
                    setEnvVar('VERSION', sh(script: 'npm show . version', label: 'tag the version as stack release', returnStdout: true).trim())
                    sh(script: "npm dist-tag --otp=${env.TOTP_CODE} add ${env.NPM_PACKAGE}@${env.VERSION} stack_release", label: 'tag stack_release')
                  }
                }
              }
            }
          }
          post {
            success {
              notifyStatus(slackStatus: 'good', subject: "[${env.REPO}] Stack Release '${env.VERSION}' published", body: "Great news, the stack release has been done successfully. (<${env.RUN_DISPLAY_URL}|Open>). \n Release URL: (<https://preview.npmjs.com/package/${env.NPM_PACKAGE}/v/${env.VERSION}|${env.VERSION}>)")
            }
            always {
              script {
                currentBuild.description = "${currentBuild.description?.trim() ? currentBuild.description : ''} released"
              }
            }
            failure {
              notifyStatus(slackStatus: 'danger', subject: "[${env.REPO}] Stack Release '${env.VERSION?.trim()}' failed", body: "(<${env.RUN_DISPLAY_URL}|Open>)")
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}

def cleanup(){
  dir("${BASE_DIR}") {
    deleteDir()
  }
  unstash 'source'
}

def withNodeInDockerEnv(Map args=[:], Closure body) {
  docker.image("${NODE_DOCKER_IMAGE}").inside(" --security-opt seccomp=${SECCOMP_FILE}"){
    withEnv(["HOME=${WORKSPACE}"]) {
      body()
    }
  }
}

/**
  This is the wrapper to send notifications for the release process through
  slack and email, since it requires some formatting to support the same
  message in both systems.
 */
def notifyStatus(def args = [:]) {
  releaseNotification(slackChannel: "${env.SLACK_CHANNEL}",
                      slackColor: args.slackStatus,
                      slackCredentialsId: 'jenkins-slack-integration-token',
                      to: 'synthrum@elastic.co',
                      subject: args.subject,
                      body: args.body)
}
