#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu-18 && immutable' }
  environment {
    REPO = "synthetics"
    BASE_DIR = "src/github.com/elastic/${env.REPO}"
    PIPELINE_LOG_LEVEL = 'INFO'
    DOCKERELASTIC_SECRET = 'secret/observability-team/ci/docker-registry/prod'
    DOCKER_REGISTRY = 'docker.elastic.co'
    NODE_DOCKER_IMAGE = "${env.DOCKER_REGISTRY}/observability-ci/node-cypress:latest"
    SECCOMP_FILE = "${env.WORKSPACE}/${env.BASE_DIR}/.ci/seccomp_profile.json"
    DOCKER_IMG = "${env.DOCKER_REGISTRY}/observability-ci/synthetics"
    DOCKER_IMG_PUBLIC = "${env.DOCKER_REGISTRY}/experimental/synthetics"
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i)(^/test$)')
    upstream("apm-agent-rum/heartbeat-elastic-synthetics/${ env.JOB_BASE_NAME.startsWith('PR-') ? 'none' : 'heartbeat-synthetics' }, apm-agent-rum/heartbeat-elastic-synthetics/${ env.JOB_BASE_NAME.startsWith('PR-') ? 'none' : 'heartbeat-synthetics' }-7.x")
  }
  parameters {
    booleanParam(name: 'run_all_stages', defaultValue: false, description: 'Force to run all stages.')
  }
  stages {
    /**
     Checkout the code and stash it, to use it on other stages.
     */
    stage('Checkout') {
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}")
        retryWithSleep(retries: 3, seconds: 5, backoff: true) {
          dockerLogin(secret: "${DOCKERELASTIC_SECRET}",
                      registry: "${DOCKER_REGISTRY}")
          withNodeEnv(){
            dir("${BASE_DIR}"){
              sh(label: 'Download dependencies',script: 'npm install')
            }
          }
        }
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false, excludes: ".npm/_cacache/**"
      }
    }
    /**
     Checks formatting / linting.
     */
    stage('Lint') {
      steps {
        withGithubNotify(context: 'Linting') {
          cleanup()
          withNodeEnv(){
            dir("${BASE_DIR}"){
              sh(label: 'Checks linting',script: 'npm run-script lint')
            }
          }
        }
      }
    }

    /**
     Build the main package
     */
    stage('Build') {
      steps {
        withGithubNotify(context: 'Build') {
          cleanup()
          withNodeEnv(){
            dir("${BASE_DIR}"){
              sh(label: 'Build',script: 'npm run build')
            }
          }
        }
      }
    }
    /**
     Execute integration tests.
     */
    stage('Test') {
      steps {
        withGithubNotify(context: 'Test') {
          cleanup()
          withNodeEnv(){
            dir("${BASE_DIR}"){
              sh(label: 'install jest-unit',script: 'npm add --dev jest-junit')
              sh(label: 'Runs the tests',script: './node_modules/.bin/jest --ci --reporters=default --reporters=jest-junit')
            }
          }
        }
      }
      post {
        always {
          junit(allowEmptyResults: true, keepLongStdio: true, testResults: "${BASE_DIR}/junit.xml")
        }
      }
    }

    /**
     Publish Docker images.
     */
    stage('Publish Docker image'){
      matrix {
        agent { label 'ubuntu-18 && immutable' }
        axes {
          axis {
            name 'STACK_VERSION'
            values '8.0.0-synthetics', '7.10.0-synthetics'
          }
        }
        stages {
          stage('package'){
            steps {
              withGithubNotify(context: 'Package') {
                cleanup()
                withNodeEnv(){
                  dir("${BASE_DIR}"){
                    sh(label: 'Build',script: 'npm run build')
                    sh(label: 'Pack',script: 'npm pack')
                  }
                }
              }
            }
          }
          stage('observability-ci'){
            environment {
              DOCKER_IMG_TAG = "${env.DOCKER_IMG}:${env.GIT_BASE_COMMIT}-${env.STACK_VERSION}"
              DOCKER_IMG_TAG_BRANCH = "${env.DOCKER_IMG}:${env.BRANCH_NAME}-${env.STACK_VERSION}"
            }
            steps {
              withGithubNotify(context: "push ${DOCKER_IMG_TAG_BRANCH}") {
                pushDockerImage()
              }
            }
          }
          stage('experimental'){
            when {
              expression { return false } //Disabled until we have the namespace
              //branch 'master'
            }
            environment {
              DOCKER_IMG_TAG_BRANCH = "${env.DOCKER_IMG_PUBLIC}:${env.BRANCH_NAME}-${env.STACK_VERSION}"
            }
            steps {
              withGithubNotify(context: "push ${DOCKER_IMG_TAG_BRANCH}") {
                pushDockerImage()
              }
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}

def cleanup(){
  dir("${BASE_DIR}"){
    deleteDir()
  }
  unstash 'source'
}

def withNodeEnv(Map args=[:], Closure body){
  docker.image("${NODE_DOCKER_IMAGE}").inside(" --security-opt seccomp=${SECCOMP_FILE}"){
    withEnv(["HOME=${WORKSPACE}"]) {
      body()
    }
  }
}

def pushDockerImage(){
  dir("${BASE_DIR}"){
    dockerLogin(secret: "${env.DOCKERELASTIC_SECRET}",
      registry: "${env.DOCKER_REGISTRY}")
    sh(label: 'Build Docker image',
      script: """docker build \
        -t ${env.DOCKER_IMG_TAG} \
        -t ${env.DOCKER_IMG_TAG_BRANCH} \
        --build-arg STACK_VERSION=${env.STACK_VERSION} \
        --label BRANCH_NAME=${env.BRANCH_NAME} \
        --label GIT_SHA=${env.GIT_BASE_COMMIT} \
        --label TIMESTAMP=\$(date +%Y-%m-%d_%H:%M) \
        .
    """)
    retryWithSleep(retries: 3, seconds: 5, backoff: true){
      if(env.DOCKER_IMG_TAG){
        sh(label: 'Push Docker image sha',
          script: "docker push ${env.DOCKER_IMG_TAG}")
      }
      sh(label: 'Push Docker image name',
        script: "docker push ${env.DOCKER_IMG_TAG_BRANCH}")
    }
  }
}
