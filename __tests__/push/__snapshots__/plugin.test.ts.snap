// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Plugin bundle jouneys 1`] = `
"import { beforeAll, journey, step } from \\"@elastic/synthetics\\";
import axios from \\"axios\\";
beforeAll(async () => {
  await waitForElasticSearch();
  await waitForSyntheticsData();
  await waitForKibana();
});
journey(\\"E2e test synthetics\\", async ({ page }) => {
  async function refreshUptimeApp() {
    while (!await page.$(\\"div.euiBasicTable\\")) {
      await page.click(\\"[data-test-subj=superDatePickerApplyTimeButton]\\", {
        timeout: 60 * 1e3
      });
    }
  }
  step(\\"Go to kibana uptime app\\", async () => {
    await page.goto(\\"http://localhost:5620/app/uptime\\", {
      waitUntil: \\"networkidle\\"
    });
  });
  step(\\"Check if there is table data\\", async () => {
    await page.click(\\"[data-test-subj=uptimeOverviewPage]\\", {
      timeout: 60 * 1e3
    });
    await refreshUptimeApp();
    await page.click(\\"div.euiBasicTable\\", { timeout: 60 * 1e3 });
  });
  step(\\"Click on my monitor\\", async () => {
    await page.click(\\"[data-test-subj=monitor-page-link-my-monitor]\\");
  });
  step(\\"It navigates to details page\\", async () => {
    await page.click(\\"[data-test-subj=uptimeMonitorPage]\\");
  });
});
async function waitForSyntheticsData() {
  console.log(\\"Waiting for Synthetics to send data to ES for test monitor\\");
  let status = false;
  while (!status) {
    try {
      const { data } = await axios.post(
        \\"http://localhost:9220/heartbeat-*/_search\\",
        {
          query: {
            bool: {
              filter: [
                {
                  term: {
                    \\"monitor.id\\": \\"my-monitor\\"
                  }
                },
                {
                  exists: {
                    field: \\"summary\\"
                  }
                }
              ]
            }
          }
        }
      );
      status = data?.hits.total.value >= 2;
    } catch (e) {
    }
  }
}
async function waitForElasticSearch() {
  console.log(\\"Waiting for Elastic Search  to start\\");
  let esStatus = false;
  while (!esStatus) {
    try {
      const { data } = await axios.get(\\"http://localhost:9220/_cluster/health\\");
      esStatus = data?.status !== \\"red\\";
    } catch (e) {
    }
  }
}
async function waitForKibana() {
  console.log(\\"Waiting for kibana server to start\\");
  let esStatus = false;
  while (!esStatus) {
    try {
      const { data } = await axios.get(\\"http://localhost:5620/api/status\\");
      esStatus = data?.status.overall.level === \\"available\\";
    } catch (e) {
    }
  }
}
"
`;
