name: release

on:
  workflow_dispatch:
    inputs:
      is-stack-release:
        type: boolean
        description: Should we tag the current version as a stack release?
        required: true
        default: false
      dry-run:
        type: boolean
        description: "Should we run in dry-run mode?"
        required: true
        default: false

permissions:
  contents: read

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # required for OIDC and provenance (npm publish)
    steps:
      - name: Get token
        id: get_token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.OBS_AUTOMATION_APP_ID }}
          private-key: ${{ secrets.OBS_AUTOMATION_APP_PEM }}
          owner: elastic
          repositories: synthetics
          permission-contents: write
          permission-pull-requests: write

      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ steps.get_token.outputs.token }}

      - uses: elastic/oblt-actions/git/setup@v1
        with:
          github-token: ${{ steps.get_token.outputs.token }}

      - uses: actions/setup-node@v5
        with:
          cache: npm
          node-version-file: .nvmrc

      - run: npm ci # runs npm prepublish

      - run: npx semantic-release --dry-run="${DRY_RUN}"
        env:
          DRY_RUN: ${{ github.event.inputs.dry-run }}
          GITHUB_TOKEN: ${{ steps.get_token.outputs.token }}

      - name: Get version and package name
        run: |
          echo "VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV
          echo "NPM_PACKAGE=$(jq -r '.name' package.json)" >> $GITHUB_ENV

      - name: Create 'stack_release' dist-tag
        if: ${{ github.event.inputs.dry-run == 'false' && github.event.inputs.is-stack-release == 'true' }}
        run: npm dist-tag add "${NPM_PACKAGE}@${VERSION}" stack_release

      - if: ${{ always() && github.event.inputs.dry-run == 'false' }}
        uses: elastic/oblt-actions/slack/notify-result@v1
        with:
          bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel-id: "#synthetics-user_experience-uptime"
